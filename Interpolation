import numpy as np                  
import matplotlib.pyplot as plt    
import matplotlib as mat 
import pandas as pd 
import os 
import datetime as dt 
def BL_interp_1D(x, z, T, order, grid_step=0.01, win=True):
    """
    Band-limited interpolation of 1D functions
    """
    
    # Create Fourier order vector
    k = np.expand_dims(np.arange(-order, order+1), 0)
    
    # construct the Fourier matrix
    F = np.exp(2j*np.pi*x*k/(T[1]-T[0]))
    
    # Least-square projection (alternatively numpy.linalg.lstsq can be used)
    C = np.dot(np.dot(np.linalg.inv(np.dot(F.T,F)), F.T), z)
    
    # create new evenly spaced grid
    xg = np.expand_dims(np.arange(T[0], T[1], grid_step), 1)
    
    # window the Fourier coefficients if requested
    if (win):
        C *= np.expand_dims(np.hanning(2*order+1), 1)
    
    zg = np.dot(np.exp(2j*np.pi*xg*k/(T[1]-T[0])), C)
        
    return zg, xg, C, k

def f_BL(x):
    return 2*np.sin(2*np.pi*1*x) - 4*np.cos(2*np.pi*4*x)

# Take a random set of measurements on [0,2\pi]
T = [0, 1]
order = 6

x = (T[1]-T[0])*np.random.random((100,1))+T[0]
z = f_BL(x)

zp1, xp1, C1, k1 = BL_interp_1D(x, z, T, order, win=False)

plt.subplot(2,1,1)
plt.plot(xp1,np.real(zp1), 'r-', xp1, f_BL(xp1), 'k--', x, z, 'o')
plt.title('Time Domain')
plt.legend(('Interpolated', 'Original','Measurements'))

plt.subplot(2,1,2)
plt.stem(k1.T, abs(C1))
plt.title('Fourier coefficients magnitude')
plt.show()

def f2(x):
    return (np.abs(x)-0.5)**2

T = [-0.5, 0.5]
order = 10 

x = (T[1]-T[0]) * np.random.random((100, 1)) + T[0]

def f2(x): 
    (np.abs(x)-0.5) ** 2 
T = [-0.5, 0.5]
order = 10 

x = (T[1]-T[1]) * np.random.random((100,1)) + T[0]
z = f2(x)
zp1, xp1, C1, k1 = BL_interp_1D(x, z, T, order, win=False)

plt.subplot(2, 1, 1)
plt.plot(xp1, np.real(zp1), 'r-' , xp1, f2(xp1), 'k--', x, z, 'o')
plt.xlim([-0.5, 0.5])
plt.title('Time Domain')
plt.legend(('Interpolated ' , 'Original', 'Measurements'))

plt.subplot(2,1,2)
plt.stem(k1.T, np.abs(C1), 'k')
plt.title('Fourier coefficients magnitude')
plt.show()

