import matplotlib
import matplotlib.pyplot as plt 
import numpy as np
import IPython 
from scipy.io import wavfile 

plt.rcParams["figure.figsize"] = (14, 4)

Fs = 16000 #sampling freq 
Omega = 2 * np.pi

def prepare(x, max_value):
    N = len(x)
    tf = min(int(0.2 *Fs), int(0.1 *N))
    for n in range(0, int(tf)):
        s = float(n) / float(tf)
        x[n] *= s 
        x[N-n-1] *= s 
    
    #this is to avoid the normalization bug in IPython
    x = np.concatenate((x, np.linspace(0, max_value, int(Fs/2)), np.linspace(max_value, 0, int(Fs/2))))
    return x 

'''
The first experiment , i use sustained sounds. 
i.e. Waveform whose global envelope doesn't change.
'''
#clarinet is musical instrument
def clarinet(f, phase = []):
    T = 3
    harmonic_amplitude = [0.75,0.5,0.14, 0.5, 0.12, 0.17]
    
    phase = np.concatenate((phase, np.zeros(len(harmonic_amplitude)-len(phase))))
    
    x = np.zeros((T * Fs))
    # clarinet has only odd harmonics
    n = np.arange(len(x))
    for k , h in enumerate(harmonic_amplitude):
        x += h * np.sin(phase[k] + Omega * (2*k + 1) * (float(f)/Fs) * n)
    return x

#fundamental freq
D4 =  293.665 
x = clarinet(D4) 


plt.plot(x[0:300])
plt.show()

IPython.display.Audio(prepare(x, 5), rate=Fs)

xrp = clarinet(D4 , [3.94, 0.90, 3.98, 4.50, 4.80, 2.96])

plt.plot(xrp[0:300])
plt.show() 

IPython.display.Audio(prepare(x, 5) , rate=Fs)

xrp = clarinet(D4 , np.random.rand(6) * Omega)
plt.plot(xrp[0:300])
plt.show()

Fs, x = wavfile.read('male.wav')
plt.plot(x)
plt.show()
IPython.display.Audio(x, rate=Fs)

# first we , make sure the length is even. 

if len(x) % 2 != 0:
    x = x[:-1]
    
mv = int(max(abs(x)) * 2.2) 

plt.plot(np.abs(x[0:int(len(x)/2)]))
plt.show()
   
X = np.fft.fft(x)

plt.plot(np.abs(X[0:int(len(X)/2)])) 
plt.show()

xzp = np.fft.fft(np.abs(X))

print(max(np.imag(xzp)) / max(np.abs(xzp)))

xzp = np.real(xzp)
plt.plot(xzp)
plt.show()

#we know the signal if even-length so we need to build 
# a phase vector of the form [0 p1 p2 ... pm -pm ... -p2 -p1]
#where M = len(x) / 2
ph = np.random.rand(int(len(x) / 2)) * Omega * 1j 
ph = np.concatenate(([0] , ph, -ph[-2::-1])) 

xrp = np.fft.ifft(X * np.exp(ph))

print(max(np.imag(xrp)) / max(np.abs(xrp)))

xrp = np.real(xrp)
plt.plot(xrp)
plt.show()

IPython.display.Audio(prepare(xrp , mv), rate=Fs)
